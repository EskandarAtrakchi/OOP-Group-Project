package healthconnect;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Eskandar Atrakchi
 */
public class EskandarConnectUI extends javax.swing.JFrame {

    //create an instance from javamethods class 
    EskandarMethods jm = new EskandarMethods();
    
    public EskandarConnectUI() {
        initComponents();
        //divide the width and the height on 2 so the frame will should in the middle 
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);

        //set time and date 
        Timer timer;
        //lambda expression
        timer = new Timer(1000, (ActionEvent e) -> {
            time();
        });
        timer.start();
        date();
    }
    
    final void date() {
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);

        date.setText(year + "/" + (month + 1) + "/" + day);
    }

    void time() {
        Calendar cal = new GregorianCalendar();
        int second = cal.get(Calendar.SECOND);
        int minute = cal.get(Calendar.MINUTE);
        int hour = cal.get(Calendar.HOUR);

        time.setText(hour + ":" + minute + ":" + second);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        loginTAB = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        clearBTN = new javax.swing.JButton();
        ageLBL = new javax.swing.JLabel();
        addressTF = new javax.swing.JTextField();
        fnameTF = new javax.swing.JTextField();
        updateBTN = new javax.swing.JButton();
        signupBTN = new javax.swing.JButton();
        exitBTN1 = new javax.swing.JButton();
        addressLBL = new javax.swing.JLabel();
        fnameLBL = new javax.swing.JLabel();
        lnameLBL = new javax.swing.JLabel();
        loginidLBL = new javax.swing.JLabel();
        deleteBTN = new javax.swing.JButton();
        lnameTF = new javax.swing.JTextField();
        ageTF = new javax.swing.JTextField();
        idTF = new javax.swing.JTextField();
        passwordLBL = new javax.swing.JLabel();
        passwordTF = new javax.swing.JPasswordField();
        displayBTN = new javax.swing.JButton();
        loginBTN1 = new javax.swing.JButton();
        logoLBL2 = new javax.swing.JLabel();
        regulardisplayLoginDG = new javax.swing.JLabel();
        loginbackgroundLBL = new javax.swing.JLabel();
        appointmentTAB = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        calendar = new com.toedter.calendar.JCalendar();
        chosendateLBL = new javax.swing.JLabel();
        chosendateTF = new javax.swing.JTextField();
        doctornumberTF = new javax.swing.JTextField();
        doctornameTF = new javax.swing.JTextField();
        doctornameLBL = new javax.swing.JLabel();
        warningLBL = new javax.swing.JLabel();
        doctornumberLBL = new javax.swing.JLabel();
        appointmentdeleteBTN = new javax.swing.JButton();
        appointmentidTF = new javax.swing.JTextField();
        appointmentidLBL = new javax.swing.JLabel();
        appointmentbookBTN = new javax.swing.JButton();
        appointmentupdateBTN1 = new javax.swing.JButton();
        hideC = new javax.swing.JRadioButton();
        showC = new javax.swing.JRadioButton();
        logoLBL1 = new javax.swing.JLabel();
        appointmentidTF1 = new javax.swing.JTextField();
        confirmdateTOGGLEBTN = new javax.swing.JToggleButton();
        appointmentidLBL1 = new javax.swing.JLabel();
        appointmentdisplayBTN = new javax.swing.JButton();
        clearBTN1 = new javax.swing.JButton();
        regulardisplayLoginDG1 = new javax.swing.JLabel();
        appointmentbackgroundLBL = new javax.swing.JLabel();
        loginTAB2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        EHRdisplayBTN = new javax.swing.JButton();
        EHRcurrentmedicationTF = new javax.swing.JTextField();
        EHRalergyTF = new javax.swing.JTextField();
        EHRidTF = new javax.swing.JTextField();
        EHRcurrentmedicationLBL = new javax.swing.JLabel();
        EHRalergyLBL = new javax.swing.JLabel();
        EHRidLBL = new javax.swing.JLabel();
        EHRmedicalhistoryLBL = new javax.swing.JLabel();
        EHRmedicalhistoryTF = new javax.swing.JTextField();
        EHRupdateBTN = new javax.swing.JButton();
        exitBTN = new javax.swing.JButton();
        ehrClearBTN = new javax.swing.JButton();
        EHRdeleteBTN = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        logoLBL = new javax.swing.JLabel();
        EHRaddBTN = new javax.swing.JButton();
        regulardisplayLoginDG2 = new javax.swing.JLabel();
        ehrAnimationLBL = new javax.swing.JLabel();
        EHRbackgroundLBL = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        readfromfileBTN = new javax.swing.JButton();
        noteidTF = new javax.swing.JTextField();
        safetofileBTN = new javax.swing.JButton();
        notereferenceLBL = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notesfromfileTA = new javax.swing.JTextArea();
        searchnoteBTN = new javax.swing.JButton();
        exitBTN2 = new javax.swing.JButton();
        clearnotesBTN = new javax.swing.JButton();
        deletenoteBTN = new javax.swing.JButton();
        displaynoteBTN = new javax.swing.JButton();
        logoLBL3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notesTA = new javax.swing.JTextArea();
        addnoteBTN = new javax.swing.JButton();
        regulardisplayLoginDG3 = new javax.swing.JLabel();
        ehrAnimationLBL1 = new javax.swing.JLabel();
        EHRbackgroundLBL1 = new javax.swing.JLabel();
        loginTAB1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        logoLBL4 = new javax.swing.JLabel();
        exitfBTN = new javax.swing.JButton();
        joshuaBTN = new javax.swing.JButton();
        yonasBTN = new javax.swing.JButton();
        regulardisplayLoginDG4 = new javax.swing.JLabel();
        loginbackgroundLBL1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        date = new javax.swing.JMenu();
        time = new javax.swing.JMenu();
        LightMode = new javax.swing.JMenu();
        cannotloginBTNTAB = new javax.swing.JMenu();
        RegularDisplay = new javax.swing.JMenu();
        arrayListUserTemporaryStoredData = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane3.setToolTipText("");

        loginTAB.setToolTipText("to manage profile ");

        jPanel6.setLayout(null);

        clearBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearBTN.setForeground(new java.awt.Color(102, 102, 102));
        clearBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/edit.png"))); // NOI18N
        clearBTN.setText("Clear?");
        clearBTN.setToolTipText("clear the fields");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });
        jPanel6.add(clearBTN);
        clearBTN.setBounds(90, 630, 120, 40);

        ageLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ageLBL.setForeground(new java.awt.Color(102, 102, 102));
        ageLBL.setText("Age");
        jPanel6.add(ageLBL);
        ageLBL.setBounds(420, 210, 80, 30);
        jPanel6.add(addressTF);
        addressTF.setBounds(30, 240, 260, 30);

        fnameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fnameTFKeyTyped(evt);
            }
        });
        jPanel6.add(fnameTF);
        fnameTF.setBounds(420, 130, 280, 30);

        updateBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateBTN.setForeground(new java.awt.Color(102, 102, 102));
        updateBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/update icon.png"))); // NOI18N
        updateBTN.setText("Update");
        updateBTN.setToolTipText("Update user data ");
        updateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTNActionPerformed(evt);
            }
        });
        jPanel6.add(updateBTN);
        updateBTN.setBounds(460, 630, 100, 40);
        updateBTN.setEnabled(false);

        signupBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        signupBTN.setForeground(new java.awt.Color(102, 102, 102));
        signupBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/addemployee.png"))); // NOI18N
        signupBTN.setText("Sign-Up?");
        signupBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupBTNActionPerformed(evt);
            }
        });
        jPanel6.add(signupBTN);
        signupBTN.setBounds(600, 0, 130, 40);

        exitBTN1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exitBTN1.setForeground(new java.awt.Color(102, 102, 102));
        exitBTN1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/logout.png"))); // NOI18N
        exitBTN1.setText("Log-Out?");
        exitBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTN1ActionPerformed(evt);
            }
        });
        jPanel6.add(exitBTN1);
        exitBTN1.setBounds(600, 0, 130, 40);
        exitBTN1.setVisible(false);

        addressLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addressLBL.setForeground(new java.awt.Color(102, 102, 102));
        addressLBL.setText("Address");
        jPanel6.add(addressLBL);
        addressLBL.setBounds(30, 210, 80, 30);

        fnameLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        fnameLBL.setForeground(new java.awt.Color(102, 102, 102));
        fnameLBL.setText("First Name");
        jPanel6.add(fnameLBL);
        fnameLBL.setBounds(420, 100, 80, 30);

        lnameLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lnameLBL.setForeground(new java.awt.Color(102, 102, 102));
        lnameLBL.setText("Last Name");
        jPanel6.add(lnameLBL);
        lnameLBL.setBounds(30, 100, 80, 30);

        loginidLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        loginidLBL.setForeground(new java.awt.Color(102, 102, 102));
        loginidLBL.setText("Your ID");
        jPanel6.add(loginidLBL);
        loginidLBL.setBounds(420, 340, 80, 30);

        deleteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteBTN.setForeground(new java.awt.Color(102, 102, 102));
        deleteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/delete_16x16.gif"))); // NOI18N
        deleteBTN.setText("Delete");
        deleteBTN.setToolTipText("Delete user data ");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });
        jPanel6.add(deleteBTN);
        deleteBTN.setBounds(350, 630, 100, 40);
        deleteBTN.setEnabled(false);

        lnameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lnameTFKeyTyped(evt);
            }
        });
        jPanel6.add(lnameTF);
        lnameTF.setBounds(30, 130, 260, 30);

        ageTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ageTFKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ageTFKeyTyped(evt);
            }
        });
        jPanel6.add(ageTF);
        ageTF.setBounds(420, 240, 280, 30);

        idTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTFKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                idTFKeyTyped(evt);
            }
        });
        jPanel6.add(idTF);
        idTF.setBounds(420, 370, 280, 30);

        passwordLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        passwordLBL.setForeground(new java.awt.Color(102, 102, 102));
        passwordLBL.setText("Your Password");
        jPanel6.add(passwordLBL);
        passwordLBL.setBounds(30, 340, 110, 30);
        jPanel6.add(passwordTF);
        passwordTF.setBounds(30, 370, 250, 30);

        displayBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        displayBTN.setForeground(new java.awt.Color(102, 102, 102));
        displayBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/job.png"))); // NOI18N
        displayBTN.setText("Display");
        displayBTN.setToolTipText("Display user data ");
        displayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBTNActionPerformed(evt);
            }
        });
        jPanel6.add(displayBTN);
        displayBTN.setBounds(220, 630, 120, 40);
        displayBTN.setEnabled(false);

        loginBTN1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        loginBTN1.setForeground(new java.awt.Color(102, 102, 102));
        loginBTN1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/Search.png"))); // NOI18N
        loginBTN1.setText("Log-in");
        loginBTN1.setToolTipText("log in button");
        loginBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBTN1ActionPerformed(evt);
            }
        });
        jPanel6.add(loginBTN1);
        loginBTN1.setBounds(570, 630, 150, 40);

        logoLBL2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo_ImgsOne/logo.gif"))); // NOI18N
        jPanel6.add(logoLBL2);
        logoLBL2.setBounds(0, 0, 80, 80);

        regulardisplayLoginDG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/1_BwPVRH0tiR2p_667fasjrQ.jpg"))); // NOI18N
        jPanel6.add(regulardisplayLoginDG);
        regulardisplayLoginDG.setBounds(0, 0, 730, 710);

        loginbackgroundLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/newDarkBG.png"))); // NOI18N
        jPanel6.add(loginbackgroundLBL);
        loginbackgroundLBL.setBounds(0, -20, 770, 740);

        javax.swing.GroupLayout loginTABLayout = new javax.swing.GroupLayout(loginTAB);
        loginTAB.setLayout(loginTABLayout);
        loginTABLayout.setHorizontalGroup(
            loginTABLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        loginTABLayout.setVerticalGroup(
            loginTABLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("LOG-IN", loginTAB);

        jPanel8.setLayout(null);

        calendar.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Date for your Appointment"));
        calendar.setForeground(new java.awt.Color(102, 102, 102));
        jPanel8.add(calendar);
        calendar.setBounds(0, 90, 730, 210);
        calendar.setVisible(false);

        chosendateLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chosendateLBL.setForeground(new java.awt.Color(102, 102, 102));
        chosendateLBL.setText("The Chosen Date is");
        jPanel8.add(chosendateLBL);
        chosendateLBL.setBounds(260, 450, 150, 30);

        chosendateTF.setEditable(false);
        chosendateTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chosendateTFMouseClicked(evt);
            }
        });
        jPanel8.add(chosendateTF);
        chosendateTF.setBounds(430, 450, 270, 30);
        jPanel8.add(doctornumberTF);
        doctornumberTF.setBounds(430, 570, 270, 30);

        doctornameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                doctornameTFKeyTyped(evt);
            }
        });
        jPanel8.add(doctornameTF);
        doctornameTF.setBounds(430, 510, 270, 30);

        doctornameLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        doctornameLBL.setForeground(new java.awt.Color(102, 102, 102));
        doctornameLBL.setText("Doctor Name");
        jPanel8.add(doctornameLBL);
        doctornameLBL.setBounds(290, 510, 120, 30);

        warningLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        warningLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Warning_ImgsOne/DOT.gif"))); // NOI18N
        jPanel8.add(warningLBL);
        warningLBL.setBounds(580, 0, 20, 30);
        warningLBL.setVisible(false);

        doctornumberLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        doctornumberLBL.setForeground(new java.awt.Color(102, 102, 102));
        doctornumberLBL.setText("Doctor Number");
        jPanel8.add(doctornumberLBL);
        doctornumberLBL.setBounds(290, 570, 120, 30);

        appointmentdeleteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        appointmentdeleteBTN.setForeground(new java.awt.Color(102, 102, 102));
        appointmentdeleteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/delete_16x16.gif"))); // NOI18N
        appointmentdeleteBTN.setText("Delete");
        appointmentdeleteBTN.setToolTipText("Delete appointment details");
        appointmentdeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentdeleteBTNActionPerformed(evt);
            }
        });
        jPanel8.add(appointmentdeleteBTN);
        appointmentdeleteBTN.setBounds(400, 630, 100, 40);
        appointmentdeleteBTN.setEnabled(false);

        appointmentidTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                appointmentidTFKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                appointmentidTFKeyTyped(evt);
            }
        });
        jPanel8.add(appointmentidTF);
        appointmentidTF.setBounds(430, 400, 270, 30);

        appointmentidLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        appointmentidLBL.setForeground(new java.awt.Color(102, 102, 102));
        appointmentidLBL.setText("Your ID");
        jPanel8.add(appointmentidLBL);
        appointmentidLBL.setBounds(340, 400, 70, 30);

        appointmentbookBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        appointmentbookBTN.setForeground(new java.awt.Color(102, 102, 102));
        appointmentbookBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/attachment-512.png"))); // NOI18N
        appointmentbookBTN.setText("Book");
        appointmentbookBTN.setToolTipText("Book an appointment");
        appointmentbookBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentbookBTNActionPerformed(evt);
            }
        });
        jPanel8.add(appointmentbookBTN);
        appointmentbookBTN.setBounds(620, 630, 100, 40);
        appointmentbookBTN .setEnabled(false);

        appointmentupdateBTN1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        appointmentupdateBTN1.setForeground(new java.awt.Color(102, 102, 102));
        appointmentupdateBTN1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/update icon.png"))); // NOI18N
        appointmentupdateBTN1.setText("Update");
        appointmentupdateBTN1.setToolTipText("Update appointment details");
        appointmentupdateBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentupdateBTN1ActionPerformed(evt);
            }
        });
        jPanel8.add(appointmentupdateBTN1);
        appointmentupdateBTN1.setBounds(510, 630, 100, 40);
        appointmentupdateBTN1.setEnabled(false);

        hideC.setBackground(new java.awt.Color(153, 153, 153));
        hideC.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        hideC.setForeground(new java.awt.Color(102, 102, 102));
        hideC.setText("Hide Calendar");
        hideC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideCActionPerformed(evt);
            }
        });
        jPanel8.add(hideC);
        hideC.setBounds(10, 320, 130, 25);
        hideC.setVisible(false);

        showC.setBackground(new java.awt.Color(153, 153, 153));
        showC.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        showC.setForeground(new java.awt.Color(102, 102, 102));
        showC.setText("Show Calendar");
        showC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCActionPerformed(evt);
            }
        });
        jPanel8.add(showC);
        showC.setBounds(10, 320, 150, 25);

        logoLBL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo_ImgsOne/logo.gif"))); // NOI18N
        jPanel8.add(logoLBL1);
        logoLBL1.setBounds(0, 0, 80, 80);

        appointmentidTF1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                appointmentidTF1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                appointmentidTF1KeyTyped(evt);
            }
        });
        jPanel8.add(appointmentidTF1);
        appointmentidTF1.setBounds(430, 350, 270, 30);

        confirmdateTOGGLEBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        confirmdateTOGGLEBTN.setForeground(new java.awt.Color(102, 102, 102));
        confirmdateTOGGLEBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/save.png"))); // NOI18N
        confirmdateTOGGLEBTN.setText("Confirm Date");
        confirmdateTOGGLEBTN.setToolTipText("To populate the date in the text field");
        confirmdateTOGGLEBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmdateTOGGLEBTNActionPerformed(evt);
            }
        });
        jPanel8.add(confirmdateTOGGLEBTN);
        confirmdateTOGGLEBTN.setBounds(540, 0, 190, 50);

        appointmentidLBL1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        appointmentidLBL1.setForeground(new java.awt.Color(102, 102, 102));
        appointmentidLBL1.setText("Appointment ID");
        jPanel8.add(appointmentidLBL1);
        appointmentidLBL1.setBounds(280, 350, 120, 30);

        appointmentdisplayBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        appointmentdisplayBTN.setForeground(new java.awt.Color(102, 102, 102));
        appointmentdisplayBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/job.png"))); // NOI18N
        appointmentdisplayBTN.setText("Display");
        appointmentdisplayBTN.setToolTipText("Display appointment details");
        appointmentdisplayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentdisplayBTNActionPerformed(evt);
            }
        });
        jPanel8.add(appointmentdisplayBTN);
        appointmentdisplayBTN.setBounds(270, 630, 120, 40);
        appointmentdisplayBTN.setEnabled(false);

        clearBTN1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearBTN1.setForeground(new java.awt.Color(102, 102, 102));
        clearBTN1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/edit.png"))); // NOI18N
        clearBTN1.setText("Clear?");
        clearBTN1.setToolTipText("clear the fields ");
        clearBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTN1ActionPerformed(evt);
            }
        });
        jPanel8.add(clearBTN1);
        clearBTN1.setBounds(140, 630, 120, 40);

        regulardisplayLoginDG1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/blog.jpg"))); // NOI18N
        jPanel8.add(regulardisplayLoginDG1);
        regulardisplayLoginDG1.setBounds(0, 0, 730, 710);

        appointmentbackgroundLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/newDarkBG.png"))); // NOI18N
        jPanel8.add(appointmentbackgroundLBL);
        appointmentbackgroundLBL.setBounds(-10, -10, 760, 730);

        javax.swing.GroupLayout appointmentTABLayout = new javax.swing.GroupLayout(appointmentTAB);
        appointmentTAB.setLayout(appointmentTABLayout);
        appointmentTABLayout.setHorizontalGroup(
            appointmentTABLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        appointmentTABLayout.setVerticalGroup(
            appointmentTABLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("APPOINTMENT ", appointmentTAB);

        jPanel9.setLayout(null);

        EHRdisplayBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRdisplayBTN.setForeground(new java.awt.Color(102, 102, 102));
        EHRdisplayBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/save.png"))); // NOI18N
        EHRdisplayBTN.setText("Print the EHR");
        EHRdisplayBTN.setToolTipText("print a readable file .txt");
        EHRdisplayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EHRdisplayBTNActionPerformed(evt);
            }
        });
        jPanel9.add(EHRdisplayBTN);
        EHRdisplayBTN.setBounds(40, 410, 190, 50);
        EHRdisplayBTN.setEnabled(false);
        jPanel9.add(EHRcurrentmedicationTF);
        EHRcurrentmedicationTF.setBounds(420, 300, 280, 30);
        jPanel9.add(EHRalergyTF);
        EHRalergyTF.setBounds(420, 190, 280, 30);

        EHRidTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                EHRidTFKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                EHRidTFKeyTyped(evt);
            }
        });
        jPanel9.add(EHRidTF);
        EHRidTF.setBounds(30, 190, 260, 30);

        EHRcurrentmedicationLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRcurrentmedicationLBL.setForeground(new java.awt.Color(102, 102, 102));
        EHRcurrentmedicationLBL.setText("Current Medication");
        jPanel9.add(EHRcurrentmedicationLBL);
        EHRcurrentmedicationLBL.setBounds(420, 270, 150, 30);

        EHRalergyLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRalergyLBL.setForeground(new java.awt.Color(102, 102, 102));
        EHRalergyLBL.setText("Alergy");
        jPanel9.add(EHRalergyLBL);
        EHRalergyLBL.setBounds(420, 160, 60, 30);

        EHRidLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRidLBL.setForeground(new java.awt.Color(102, 102, 102));
        EHRidLBL.setText("Your ID");
        jPanel9.add(EHRidLBL);
        EHRidLBL.setBounds(30, 160, 60, 30);

        EHRmedicalhistoryLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRmedicalhistoryLBL.setForeground(new java.awt.Color(102, 102, 102));
        EHRmedicalhistoryLBL.setText("Medical History");
        jPanel9.add(EHRmedicalhistoryLBL);
        EHRmedicalhistoryLBL.setBounds(30, 270, 140, 30);
        jPanel9.add(EHRmedicalhistoryTF);
        EHRmedicalhistoryTF.setBounds(30, 300, 260, 30);

        EHRupdateBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRupdateBTN.setForeground(new java.awt.Color(102, 102, 102));
        EHRupdateBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/update icon.png"))); // NOI18N
        EHRupdateBTN.setText("Update");
        EHRupdateBTN.setToolTipText("Update the EHR");
        EHRupdateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EHRupdateBTNActionPerformed(evt);
            }
        });
        jPanel9.add(EHRupdateBTN);
        EHRupdateBTN.setBounds(510, 640, 100, 40);
        EHRupdateBTN.setEnabled(false);

        exitBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exitBTN.setForeground(new java.awt.Color(102, 102, 102));
        exitBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/logout.png"))); // NOI18N
        exitBTN.setText("Exit");
        exitBTN.setToolTipText("Click me to exit and log out ");
        exitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTNActionPerformed(evt);
            }
        });
        jPanel9.add(exitBTN);
        exitBTN.setBounds(620, 0, 110, 40);

        ehrClearBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ehrClearBTN.setForeground(new java.awt.Color(102, 102, 102));
        ehrClearBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/edit.png"))); // NOI18N
        ehrClearBTN.setText("Clear");
        ehrClearBTN.setToolTipText("clear the fields");
        ehrClearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ehrClearBTNActionPerformed(evt);
            }
        });
        jPanel9.add(ehrClearBTN);
        ehrClearBTN.setBounds(140, 640, 110, 40);

        EHRdeleteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRdeleteBTN.setForeground(new java.awt.Color(102, 102, 102));
        EHRdeleteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/delete_16x16.gif"))); // NOI18N
        EHRdeleteBTN.setText("Delete");
        EHRdeleteBTN.setToolTipText("Delete the EHR");
        EHRdeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EHRdeleteBTNActionPerformed(evt);
            }
        });
        jPanel9.add(EHRdeleteBTN);
        EHRdeleteBTN.setBounds(400, 640, 100, 40);
        EHRdeleteBTN.setEnabled(false);

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(102, 102, 102));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/job.png"))); // NOI18N
        jButton2.setText("Display");
        jButton2.setToolTipText("Display the EHR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton2);
        jButton2.setBounds(260, 640, 130, 40);
        jButton2.setEnabled(false);

        logoLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo_ImgsOne/logo.gif"))); // NOI18N
        jPanel9.add(logoLBL);
        logoLBL.setBounds(0, 0, 80, 80);

        EHRaddBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EHRaddBTN.setForeground(new java.awt.Color(102, 102, 102));
        EHRaddBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/attachment-512.png"))); // NOI18N
        EHRaddBTN.setText("Add");
        EHRaddBTN.setToolTipText("Add the EHR");
        EHRaddBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EHRaddBTNActionPerformed(evt);
            }
        });
        jPanel9.add(EHRaddBTN);
        EHRaddBTN.setBounds(620, 640, 100, 40);
        EHRaddBTN.setEnabled(false);

        regulardisplayLoginDG2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/EHR-Aggregator-What-is-it-and-Why-is-it-Important-in-Healthcare02..jpg"))); // NOI18N
        jPanel9.add(regulardisplayLoginDG2);
        regulardisplayLoginDG2.setBounds(0, 0, 730, 710);

        ehrAnimationLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/gif.gif"))); // NOI18N
        jPanel9.add(ehrAnimationLBL);
        ehrAnimationLBL.setBounds(20, 80, 730, 394);

        EHRbackgroundLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Screenshot (462).png"))); // NOI18N
        jPanel9.add(EHRbackgroundLBL);
        EHRbackgroundLBL.setBounds(0, 0, 750, 718);

        javax.swing.GroupLayout loginTAB2Layout = new javax.swing.GroupLayout(loginTAB2);
        loginTAB2.setLayout(loginTAB2Layout);
        loginTAB2Layout.setHorizontalGroup(
            loginTAB2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        loginTAB2Layout.setVerticalGroup(
            loginTAB2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("EHR", loginTAB2);

        jPanel10.setLayout(null);

        readfromfileBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        readfromfileBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/folder.png"))); // NOI18N
        readfromfileBTN.setText("Read From File");
        readfromfileBTN.setToolTipText("Reading from a file .dat ");
        readfromfileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readfromfileBTNActionPerformed(evt);
            }
        });
        jPanel10.add(readfromfileBTN);
        readfromfileBTN.setBounds(550, 300, 180, 50);

        noteidTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noteidTFKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                noteidTFKeyTyped(evt);
            }
        });
        jPanel10.add(noteidTF);
        noteidTF.setBounds(470, 400, 260, 30);

        safetofileBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        safetofileBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/save.png"))); // NOI18N
        safetofileBTN.setText("Safe To File");
        safetofileBTN.setToolTipText("Saving to a file .dat");
        safetofileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safetofileBTNActionPerformed(evt);
            }
        });
        jPanel10.add(safetofileBTN);
        safetofileBTN.setBounds(540, 530, 190, 40);

        notereferenceLBL.setBackground(new java.awt.Color(153, 153, 153));
        notereferenceLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        notereferenceLBL.setForeground(new java.awt.Color(0, 153, 153));
        notereferenceLBL.setText("Note reference");
        jPanel10.add(notereferenceLBL);
        notereferenceLBL.setBounds(600, 360, 140, 40);

        notesfromfileTA.setEditable(false);
        notesfromfileTA.setBackground(new java.awt.Color(204, 204, 204));
        notesfromfileTA.setColumns(20);
        notesfromfileTA.setForeground(new java.awt.Color(0, 0, 0));
        notesfromfileTA.setLineWrap(true);
        notesfromfileTA.setRows(5);
        notesfromfileTA.setToolTipText("Write the issue here ");
        notesfromfileTA.setWrapStyleWord(true);
        notesfromfileTA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notesfromfileTAMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(notesfromfileTA);

        jPanel10.add(jScrollPane2);
        jScrollPane2.setBounds(250, 210, 480, 80);

        searchnoteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchnoteBTN.setForeground(new java.awt.Color(102, 102, 102));
        searchnoteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/Save-icon.png"))); // NOI18N
        searchnoteBTN.setText("Search");
        searchnoteBTN.setToolTipText("Search data from ArrayList");
        searchnoteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchnoteBTNActionPerformed(evt);
            }
        });
        jPanel10.add(searchnoteBTN);
        searchnoteBTN.setBounds(510, 640, 100, 40);
        EHRupdateBTN.setEnabled(false);

        exitBTN2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exitBTN2.setForeground(new java.awt.Color(102, 102, 102));
        exitBTN2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/logout.png"))); // NOI18N
        exitBTN2.setText("Exit");
        exitBTN2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTN2ActionPerformed(evt);
            }
        });
        jPanel10.add(exitBTN2);
        exitBTN2.setBounds(620, 0, 110, 40);

        clearnotesBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearnotesBTN.setForeground(new java.awt.Color(102, 102, 102));
        clearnotesBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/edit.png"))); // NOI18N
        clearnotesBTN.setText("Clear");
        clearnotesBTN.setToolTipText("clear field & text area ");
        clearnotesBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearnotesBTNActionPerformed(evt);
            }
        });
        jPanel10.add(clearnotesBTN);
        clearnotesBTN.setBounds(140, 640, 110, 40);

        deletenoteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deletenoteBTN.setForeground(new java.awt.Color(102, 102, 102));
        deletenoteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/delete_16x16.gif"))); // NOI18N
        deletenoteBTN.setText("Delete");
        deletenoteBTN.setToolTipText("Delete data from ArrayList");
        deletenoteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletenoteBTNActionPerformed(evt);
            }
        });
        jPanel10.add(deletenoteBTN);
        deletenoteBTN.setBounds(400, 640, 100, 40);
        EHRdeleteBTN.setEnabled(false);

        displaynoteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        displaynoteBTN.setForeground(new java.awt.Color(102, 102, 102));
        displaynoteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsOne/job.png"))); // NOI18N
        displaynoteBTN.setText("Display");
        displaynoteBTN.setToolTipText("Display data from ArrayList");
        displaynoteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaynoteBTNActionPerformed(evt);
            }
        });
        jPanel10.add(displaynoteBTN);
        displaynoteBTN.setBounds(260, 640, 130, 40);
        jButton2.setEnabled(false);

        logoLBL3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo_ImgsOne/logo.gif"))); // NOI18N
        jPanel10.add(logoLBL3);
        logoLBL3.setBounds(0, 0, 80, 80);

        notesTA.setBackground(new java.awt.Color(204, 204, 204));
        notesTA.setColumns(20);
        notesTA.setForeground(new java.awt.Color(0, 0, 0));
        notesTA.setLineWrap(true);
        notesTA.setRows(5);
        notesTA.setToolTipText("Write the issue here ");
        notesTA.setWrapStyleWord(true);
        jScrollPane1.setViewportView(notesTA);

        jPanel10.add(jScrollPane1);
        jScrollPane1.setBounds(250, 440, 480, 80);

        addnoteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addnoteBTN.setForeground(new java.awt.Color(102, 102, 102));
        addnoteBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/attachment-512.png"))); // NOI18N
        addnoteBTN.setText("Add");
        addnoteBTN.setToolTipText("Add data to the ArrayList");
        addnoteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnoteBTNActionPerformed(evt);
            }
        });
        jPanel10.add(addnoteBTN);
        addnoteBTN.setBounds(620, 640, 100, 40);
        EHRaddBTN.setEnabled(false);

        regulardisplayLoginDG3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/notesBG.jpg"))); // NOI18N
        jPanel10.add(regulardisplayLoginDG3);
        regulardisplayLoginDG3.setBounds(0, 0, 750, 710);

        ehrAnimationLBL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/gif.gif"))); // NOI18N
        jPanel10.add(ehrAnimationLBL1);
        ehrAnimationLBL1.setBounds(20, 80, 730, 394);

        EHRbackgroundLBL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Screenshot (462).png"))); // NOI18N
        jPanel10.add(EHRbackgroundLBL1);
        EHRbackgroundLBL1.setBounds(0, 0, 750, 718);

        jTabbedPane3.addTab("NOTES TO MYSELF", jPanel10);

        jPanel7.setLayout(null);

        logoLBL4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo_ImgsOne/logo.gif"))); // NOI18N
        jPanel7.add(logoLBL4);
        logoLBL4.setBounds(0, 0, 80, 80);

        exitfBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exitfBTN.setForeground(new java.awt.Color(102, 102, 102));
        exitfBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BTNs_ImgsTwo/logout.png"))); // NOI18N
        exitfBTN.setText("Exit");
        exitfBTN.setToolTipText("Click me to exit");
        exitfBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitfBTNActionPerformed(evt);
            }
        });
        jPanel7.add(exitfBTN);
        exitfBTN.setBounds(620, 0, 110, 40);

        joshuaBTN.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        joshuaBTN.setText("Mental Health");
        joshuaBTN.setToolTipText("Joshua Tupas UI");
        joshuaBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joshuaBTNActionPerformed(evt);
            }
        });
        jPanel7.add(joshuaBTN);
        joshuaBTN.setBounds(20, 200, 300, 100);
        joshuaBTN.setEnabled(false);

        yonasBTN.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        yonasBTN.setText("Physical Health");
        yonasBTN.setToolTipText("Yonas Haftom UI ");
        yonasBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yonasBTNActionPerformed(evt);
            }
        });
        jPanel7.add(yonasBTN);
        yonasBTN.setBounds(380, 200, 300, 100);
        yonasBTN.setEnabled(false);

        regulardisplayLoginDG4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/1_BwPVRH0tiR2p_667fasjrQ.jpg"))); // NOI18N
        jPanel7.add(regulardisplayLoginDG4);
        regulardisplayLoginDG4.setBounds(0, 0, 730, 710);

        loginbackgroundLBL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/newDarkBG.png"))); // NOI18N
        jPanel7.add(loginbackgroundLBL1);
        loginbackgroundLBL1.setBounds(0, -20, 770, 740);

        javax.swing.GroupLayout loginTAB1Layout = new javax.swing.GroupLayout(loginTAB1);
        loginTAB1.setLayout(loginTAB1Layout);
        loginTAB1Layout.setHorizontalGroup(
            loginTAB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        loginTAB1Layout.setVerticalGroup(
            loginTAB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("OTHER SERVICES", loginTAB1);

        jMenuBar1.setToolTipText("Menu to view data ");

        date.setText("Date");
        jMenuBar1.add(date);

        time.setText("Time");
        jMenuBar1.add(time);

        LightMode.setText("Light-mode");
        LightMode.setToolTipText("Clcik me to switch the mode");
        LightMode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LightModeMouseClicked(evt);
            }
        });
        jMenuBar1.add(LightMode);

        cannotloginBTNTAB.setText("Got an Issue?");
        cannotloginBTNTAB.setToolTipText("path to be authorizated");
        cannotloginBTNTAB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cannotloginBTNTABMouseClicked(evt);
            }
        });
        jMenuBar1.add(cannotloginBTNTAB);

        RegularDisplay.setText("Advanced-mode");
        RegularDisplay.setToolTipText("Clcik me to switch the mode");
        RegularDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RegularDisplayMouseClicked(evt);
            }
        });
        jMenuBar1.add(RegularDisplay);

        arrayListUserTemporaryStoredData.setText("Logged Data");
        arrayListUserTemporaryStoredData.setToolTipText("Read user profile from ArrayList");
        arrayListUserTemporaryStoredData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                arrayListUserTemporaryStoredDataMouseClicked(evt);
            }
        });
        jMenuBar1.add(arrayListUserTemporaryStoredData);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane3))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>                        

    private boolean isLightMode = true;
    
    private void LightModeMouseClicked(java.awt.event.MouseEvent evt) {                                       

        if (loginbackgroundLBL.isShowing() == true 
                || appointmentbackgroundLBL.isShowing() == true 
                || EHRbackgroundLBL.isShowing() == true
                || ehrAnimationLBL.isShowing() == true 
                || EHRbackgroundLBL1.isShowing() == true
                || ehrAnimationLBL1.isShowing() == true 
                || loginbackgroundLBL1.isShowing() == true) {
            
            regulardisplayLoginDG4.setVisible(false);
            regulardisplayLoginDG3.setVisible(false);
            regulardisplayLoginDG2.setVisible(false);
            regulardisplayLoginDG1.setVisible(false);
            regulardisplayLoginDG.setVisible(false);
            
        }
        
        loginbackgroundLBL.setVisible(!isLightMode);
        appointmentbackgroundLBL.setVisible(!isLightMode);
        EHRbackgroundLBL.setVisible(!isLightMode);
        ehrAnimationLBL.setVisible(!isLightMode);
        EHRbackgroundLBL1.setVisible(!isLightMode);
        ehrAnimationLBL1.setVisible(!isLightMode);
        loginbackgroundLBL1.setVisible(!isLightMode);

        // note: will have to create  to be able to toggle other labels in other frames
        LightMode.setText(isLightMode ? "Dark-mode" : "Light-mode");
        //RegularDisplay.setText(isLightMode ? "Regular-mode" : "Advanced-mode");
        isLightMode = !isLightMode;
    }                                      

    private void EHRaddBTNActionPerformed(java.awt.event.ActionEvent evt) {                                          
        UserProfile up = new UserProfile ();
        try {
            int patientId = Integer.parseInt(EHRidTF.getText());
            String alergies = EHRalergyTF.getText();
            String currentMedication = EHRcurrentmedicationTF.getText();
            String medicalHistory = EHRmedicalhistoryTF.getText();

            // Create an instance of ElectricalHealthcareRecord
            ElectricalHealthcareRecord ehr = new ElectricalHealthcareRecord(
                    alergies, 
                    currentMedication, 
                    medicalHistory,
                    patientId, 
       up.getPatientFirstName(), 
        up.getPatientLastName(), 
         up.getPatientAddress(),
            up.getPatientAge(), 
         up.getPatientPassword()
            );
            // Call the addEHR method
            jm.addEHR(ehr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid patientId. Please enter a valid number.");
        }
    }                                         

    private void EHRdeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {                                             

        if (EHRidTF.getText().isEmpty() == true) {
                JOptionPane.showMessageDialog(null, "ID field is empty!");
        } else {
            int patientId = Integer.parseInt(EHRidTF.getText());
            jm.deleteEHR(patientId);
            jm.ehrClear();
        }
    }                                            

    private void EHRupdateBTNActionPerformed(java.awt.event.ActionEvent evt) {                                             

        if (EHRidTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null , "The ID field is empty!");
        }
        else {
            int patientId = Integer.parseInt(EHRidTF.getText());
            String newAllergies = EHRalergyTF.getText();
            String newCurrentMedication = EHRcurrentmedicationTF.getText();
            String newMedicalHistory = EHRmedicalhistoryTF.getText();

            // Call the updateEHR method
            jm.updateEHR(patientId, newAllergies, newCurrentMedication, newMedicalHistory);
        }
    }                                            

    private void showCActionPerformed(java.awt.event.ActionEvent evt) {                                      

        calendar.setVisible(true);
        if (showC.isSelected() == true) {
            showC.setVisible(false);
            hideC.setVisible(true);
            showC.setSelected(false);
            warningLBL.setVisible(true);
            confirmdateTOGGLEBTN.setSelected(false);
            confirmdateTOGGLEBTN.setText("Confirm Date");
        }
    }                                     

    private void hideCActionPerformed(java.awt.event.ActionEvent evt) {                                      
        
        calendar.setVisible(false);
        if (hideC.isSelected() == true) {
            hideC.setVisible(false);
            showC.setVisible(true);
            hideC.setSelected(false);
            warningLBL.setVisible(false);
        }
    }                                     

    private void appointmentbookBTNActionPerformed(java.awt.event.ActionEvent evt) {                                                   

        if (appointmentidTF1.getText().isEmpty() == true || 
                chosendateTF.getText().isEmpty() == true || 
                doctornameTF.getText().isEmpty() == true || 
                doctornumberTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } 
        else if (appointmentidTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null , "you need to login first!");
        } else {
            int appointmentId = Integer.parseInt(appointmentidTF1.getText());
            String date = chosendateTF.getText();
            String contactNumber = doctornumberTF.getText();
            String doctorName = doctornameTF.getText();
            int patientId = Integer.parseInt(idTF.getText());
            
            jm.bookAppointment(appointmentId, date, contactNumber, doctorName, patientId);
        }
    }                                                  

    private void appointmentdeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {                                                     

        if (appointmentidTF1.getText().isEmpty() == true || 
                appointmentidTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } else {
            int enteredPatientId = Integer.parseInt(appointmentidTF1.getText());
            jm.deleteAppointment(enteredPatientId);
        }
    }                                                    

    private void loginBTN1ActionPerformed(java.awt.event.ActionEvent evt) {                                          
       
        if (passwordTF.getText().isEmpty() == true || 
                idTF.getText().isEmpty() == true) {
            
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } else {
            int enteredPatientId = Integer.parseInt(idTF.getText());
            String enteredPassword = passwordTF.getText();

            jm.loginUser(enteredPatientId, enteredPassword);
        }
    }                                         

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (idTF.getText().isEmpty() == true) {
            
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } else {
            try {
                String enteredId = idTF.getText();
                if (enteredId.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please enter a patientId before deleting.");
                    return;
                }

                int patientId = Integer.parseInt(enteredId);
                jm.deleteUser(patientId);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid patientId. Please enter a valid numeric value.");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        }       
    }                                         

    private void updateBTNActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (lnameTF.getText().isEmpty() == true || 
                fnameTF.getText().isEmpty() == true || 
                addressTF.getText().isEmpty() == true || 
                ageTF.getText().isEmpty() == true ||
                idTF.getText().isEmpty() == true) {
            
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } else {
            try {
                String newFirstName = EskandarConnectUI.fnameTF.getText();
                int enteredPatientId = Integer.parseInt(idTF.getText());
                String newLastName = lnameTF.getText();
                String newAddress = addressTF.getText();
                int newAge = Integer.parseInt(ageTF.getText());
                String newPassword = passwordTF.getText();

                // Retrieve the existing user profile
                UserProfile existingUserProfile = jm.getUserProfile(enteredPatientId);

                // Update the user information using setter methods
                existingUserProfile.setPatientFirstName(newFirstName);
                existingUserProfile.setPatientLastName(newLastName);
                existingUserProfile.setPatientAddress(newAddress);
                existingUserProfile.setPatientAge(newAge);
                existingUserProfile.setPatientPassword(newPassword);
                

                // Call the updateUser method
                jm.updateUser(existingUserProfile);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error retrieving user profile: " + e.getMessage());
            }
        }
    }                                         

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //call the method to clear 
        jm.clearLoginTab();
    }                                        

    private void displayBTNActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (idTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } else {
            int patientId = Integer.parseInt(idTF.getText());
            jm.displayUserData(patientId);
        }
    }                                          

    private void EHRdisplayBTNActionPerformed(java.awt.event.ActionEvent evt) {                                              

        if (EHRidTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null , "Please log in first!");
        } else {
            String fileName = JOptionPane.showInputDialog("Please write file name.");
            String filePath = fileName + ".txt";
            
            String loggedInUserId = EHRidTF.getText();
            // Call the writeAllEHRToFile method
            jm.writeUserEHRToFile(filePath, loggedInUserId);
        }
    }                                             

    private void signupBTNActionPerformed(java.awt.event.ActionEvent evt) {                                          
        
        if (lnameTF.getText().isEmpty() == true || 
                fnameTF.getText().isEmpty() == true || 
                addressTF.getText().isEmpty() == true || 
                ageTF.getText().isEmpty() == true ||
                passwordTF.getText().isEmpty() == true ||
                idTF.getText().isEmpty() == true) {
            
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } else {
            String patientFirstName = fnameTF.getText();
            int patientId = Integer.parseInt(idTF.getText());
            String patientLastName = lnameTF.getText();
            String patientAddress = addressTF.getText();
            int patientAge = Integer.parseInt(ageTF.getText());
            String patientPassword = passwordTF.getText();

            jm.registerUser(patientId, patientFirstName, patientLastName, patientAddress, patientAge, patientPassword);
            jm.clearLoginTab();
        }
    }                                         

    private void appointmentupdateBTN1ActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        UserProfile up = new UserProfile ();
        if (appointmentidTF1.getText().isEmpty() == true || 
                chosendateTF.getText().isEmpty() == true || 
                doctornameTF.getText().isEmpty() == true || 
                doctornumberTF.getText().isEmpty() == true) {
            
            JOptionPane.showMessageDialog(null , "TextFields are empty!!");
        } else {
            int appointmentId = Integer.parseInt(appointmentidTF1.getText());
            String newDate = chosendateTF.getText();
            String newContactNumber = doctornumberTF.getText();
            String newDoctorName = doctornameTF.getText();

            Appointment updatedAppointment = new Appointment(
                appointmentId, 
                newDate, 
                newContactNumber, 
                newDoctorName, 
                up.getPatientId(), 
                up.getPatientFirstName(), 
                up.getPatientLastName(), 
                up.getPatientAddress(), 
                up.getPatientAge(), 
                up.getPatientPassword()
            );
            jm.updateAppointment(updatedAppointment);
        }
    }                                                     

    private void appointmentdisplayBTNActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        if (appointmentidTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null, "TextField is empty!!");
        } else {
            try {
                int appointmentId = Integer.parseInt(appointmentidTF.getText());
                jm.displayAppointmentsForPatient(appointmentId);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid appointmentId. Please enter a valid number.");
            }
        }
    }                                                     

    private void clearBTN1ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        
        jm.clearAppointmentMethod();
    }                                         

    private void ageTFKeyPressed(java.awt.event.KeyEvent evt) {                                 
        int lengthPIN = ageTF.getText().length();

        if (lengthPIN == 3) {

            ageTF.setText("");

            JOptionPane.showMessageDialog(null, "You cannot enter more than 3 digits");

        }
    }                                

    private void idTFKeyPressed(java.awt.event.KeyEvent evt) {                                
        int lengthPIN = idTF.getText().length();

        if (lengthPIN == 8) {

            idTF.setText("");

            JOptionPane.showMessageDialog(null, "You cannot enter more than 8 digits");

        }
    }                               

    private void appointmentidTF1KeyPressed(java.awt.event.KeyEvent evt) {                                            
        int lengthPIN = appointmentidTF1.getText().length();

        if (lengthPIN == 8) {

            appointmentidTF1.setText("");

            JOptionPane.showMessageDialog(null, "You cannot enter more than 8 digits");

        }
    }                                           

    private void chosendateTFMouseClicked(java.awt.event.MouseEvent evt) {                                          
        JOptionPane.showMessageDialog(null, "Select from the calendar.\nIf it is hidden click on show calendar.");
    }                                         

    private void EHRidTFKeyPressed(java.awt.event.KeyEvent evt) {                                   
        int lengthPIN = EHRidTF.getText().length();

        if (lengthPIN == 8) {
            EHRidTF.setText("");
            JOptionPane.showMessageDialog(null, "You cannot enter more than 8 digits");
        }
    }                                  

    private void EHRidTFKeyTyped(java.awt.event.KeyEvent evt) {                                 
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered not a digit!!!");
        }
    }                                

    private void appointmentidTF1KeyTyped(java.awt.event.KeyEvent evt) {                                          
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered not a digit!!!");
        }
    }                                         

    private void appointmentidTFKeyPressed(java.awt.event.KeyEvent evt) {                                           
        int lengthPIN = appointmentidTF.getText().length();

        if (lengthPIN == 8) {

            appointmentidTF.setText(null);

            JOptionPane.showMessageDialog(null, "You cannot enter more than 8 digits");

        }
    }                                          

    private void appointmentidTFKeyTyped(java.awt.event.KeyEvent evt) {                                         
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered not a digit!!!");
        }
    }                                        

    private void ageTFKeyTyped(java.awt.event.KeyEvent evt) {                               
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered not a digit!!!");
        }
    }                              

    private void idTFKeyTyped(java.awt.event.KeyEvent evt) {                              
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered not a digit!!!");
        }
    }                             

    private void lnameTFKeyTyped(java.awt.event.KeyEvent evt) {                                 
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered a digit!!!");
        }
    }                                

    private void fnameTFKeyTyped(java.awt.event.KeyEvent evt) {                                 
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered a digit!!!");
        }
    }                                

    private void doctornameTFKeyTyped(java.awt.event.KeyEvent evt) {                                      
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered a digit!!!");
        }
    }                                     

    private void cannotloginBTNTABMouseClicked(java.awt.event.MouseEvent evt) {                                               
        
        int confirm = JOptionPane.showConfirmDialog(null, "Do you want to print your health record with authorized access?", "File path problems?", JOptionPane.YES_NO_OPTION);
        if (confirm == 0) {
            JOptionPane.showMessageDialog(null  , "Here is an example on how to compose a path\n\"C:/Users/Laptop's Name/Desktop/File's Name.txt\"");
            String filePath = JOptionPane.showInputDialog("Please enter the path you can access.");
            
            String loggedInUserId = idTF.getText();
            if (idTF.getText().isEmpty() == true) {
                JOptionPane.showMessageDialog(null , "Please log in first!");
            } else {
                // Call the writeAllEHRToFile method
                jm.writeUserEHRToFile(filePath, loggedInUserId);
            }
        } else if (confirm == 1) {
            JOptionPane.showMessageDialog(null ,  "You selected NO.\nIf you need help please come back and check the options provided.");
        } 
    }                                              

    private void RegularDisplayMouseClicked(java.awt.event.MouseEvent evt) {                                            
        
        if (regulardisplayLoginDG4.isShowing() == true
                || regulardisplayLoginDG3.isShowing() == true
                || regulardisplayLoginDG2.isShowing() == true 
                || regulardisplayLoginDG1.isShowing() == true 
                || regulardisplayLoginDG.isShowing() == true) {
            
            loginbackgroundLBL.setVisible(false);
            appointmentbackgroundLBL.setVisible(false);
            EHRbackgroundLBL.setVisible(false);
            ehrAnimationLBL.setVisible(false);
            EHRbackgroundLBL1.setVisible(false);
            ehrAnimationLBL1.setVisible(false);
            loginbackgroundLBL1.setVisible(false);
        }
        regulardisplayLoginDG.setVisible(!isLightMode);
        regulardisplayLoginDG1.setVisible(!isLightMode);
        regulardisplayLoginDG2.setVisible(!isLightMode);
        regulardisplayLoginDG3.setVisible(!isLightMode);
        regulardisplayLoginDG4.setVisible(!isLightMode);

        // note: will have to create  to be able to toggle other labels in other frames
        RegularDisplay.setText(isLightMode ? "Regular-mode" : "Advanced-mode");
        isLightMode = !isLightMode;
    }                                           

    private void exitBTNActionPerformed(java.awt.event.ActionEvent evt) {                                        
        JOptionPane.showMessageDialog(null , "you have logged out successfully!\nBye_bye");
        System.exit(0);
    }                                       

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if (EHRidTF.getText().isEmpty() == true) {
                JOptionPane.showMessageDialog(null, "ID field is empty!");
        } else {
            int patientId = Integer.parseInt(EHRidTF.getText());
            jm.displayEHR(patientId );
        } 
    }                                        

    private void ehrClearBTNActionPerformed(java.awt.event.ActionEvent evt) {                                            
        jm.ehrClear();
    }                                           

    private void exitBTN1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        JOptionPane.showMessageDialog(null , "you have logged out successfully!\nBye_bye.");
        System.exit(0);
    }                                        

    private void confirmdateTOGGLEBTNActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        
        if (confirmdateTOGGLEBTN.isSelected() == true) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date selectedDate = calendar.getDate();

            String formattedDate = dateFormat.format(selectedDate);
            chosendateTF.setText(formattedDate);
            
            confirmdateTOGGLEBTN.setText("Date Confirmed");
            calendar.setVisible(false);
            showC.setVisible(true);
            hideC.setVisible(false);
            warningLBL.setVisible(false);
            
        } else if (confirmdateTOGGLEBTN.isSelected() == false) {
            //there should be no action here as I will be waiting for the user to toggle the radio buttons 
        }
    }                                                    

    private void arrayListUserTemporaryStoredDataMouseClicked(java.awt.event.MouseEvent evt) {                                                              
        
        if (idTF.getText().isEmpty() ==  true) {
            JOptionPane.showMessageDialog(null, "Please, log in first!");
        }
        else {
            jm.dataList ();
        }
    }                                                             

    private void exitBTN2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        JOptionPane.showMessageDialog(null,  "No worries! If you are logged in we will log you out and close the APP!\nBye_bye.");
        System.exit(0);
    }                                        

    private void clearnotesBTNActionPerformed(java.awt.event.ActionEvent evt) {                                              
        noteidTF.setText(null);
        notesTA.setText(null);
    }                                             

    private void deletenoteBTNActionPerformed(java.awt.event.ActionEvent evt) {                                              

        if (noteidTF.getText().isEmpty() == true) { 
            JOptionPane.showMessageDialog(null, "reference number field is empty");
        }else {
            int numberReference = Integer.parseInt(noteidTF.getText());
            jm.removeTextInfoByNumberReference(numberReference);
        }
    }                                             

    private void displaynoteBTNActionPerformed(java.awt.event.ActionEvent evt) {                                               
        
        if (noteidTF.getText().isEmpty() == true) { 
            JOptionPane.showMessageDialog(null, "reference number field is empty");
        } else {
            jm.displayAllTextInfo();
        }
    }                                              

    private void addnoteBTNActionPerformed(java.awt.event.ActionEvent evt) {                                           
        
        if (notesTA.getText().isEmpty() == true || noteidTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null, "One of the field is empty");
        } else {
            String text = notesTA.getText();
            int numberReference = Integer.parseInt(noteidTF.getText());

            jm.addTextInfo (text, numberReference);
        }
    }                                          

    private void searchnoteBTNActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if (noteidTF.getText().isEmpty() == true) { 
            JOptionPane.showMessageDialog(null, "reference number field is empty");
        } else {
            int numberReference = Integer.parseInt(noteidTF.getText());
            jm.searchTextInfoByNumberReference(numberReference);
        }
    }                                             

    private void noteidTFKeyPressed(java.awt.event.KeyEvent evt) {                                    
        int lengthPIN = noteidTF.getText().length();

        if (lengthPIN == 8) {

            noteidTF.setText("");

            JOptionPane.showMessageDialog(null, "You cannot enter more than 8 digits"); 
        }
    }                                   

    private void noteidTFKeyTyped(java.awt.event.KeyEvent evt) {                                  
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "You have entered not a digit!!!");
        }
    }                                 

    private void safetofileBTNActionPerformed(java.awt.event.ActionEvent evt) {                                              
        
        if (notesTA.getText().isEmpty() == true || noteidTF.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null, "The text area or the reference number is empty. " );
        } else {
            jm.notesToFile ();
        }
    }                                             

    private void readfromfileBTNActionPerformed(java.awt.event.ActionEvent evt) {                                                
        jm.readNotesFromFile();
    }                                               

    private void notesfromfileTAMouseClicked(java.awt.event.MouseEvent evt) {                                             
        JOptionPane.showMessageDialog(null , "You are only reading data from here!\nType your notes in the text area below.");
    }                                            

    private void yonasBTNActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        this.dispose ();
        HealthConnectUI.main(null);
    }                                        

    private void joshuaBTNActionPerformed(java.awt.event.ActionEvent evt) {                                          

        JoshuaConnectUI.main(null);
        this.dispose ();
        
    }                                         

    private void exitfBTNActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.exit(0);
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EskandarConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EskandarConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EskandarConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EskandarConnectUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EskandarConnectUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    public static javax.swing.JButton EHRaddBTN;
    private javax.swing.JLabel EHRalergyLBL;
    public static javax.swing.JTextField EHRalergyTF;
    private javax.swing.JLabel EHRbackgroundLBL;
    private javax.swing.JLabel EHRbackgroundLBL1;
    private javax.swing.JLabel EHRcurrentmedicationLBL;
    public static javax.swing.JTextField EHRcurrentmedicationTF;
    public static javax.swing.JButton EHRdeleteBTN;
    public static javax.swing.JButton EHRdisplayBTN;
    private javax.swing.JLabel EHRidLBL;
    public static javax.swing.JTextField EHRidTF;
    private javax.swing.JLabel EHRmedicalhistoryLBL;
    public static javax.swing.JTextField EHRmedicalhistoryTF;
    public static javax.swing.JButton EHRupdateBTN;
    private javax.swing.JMenu LightMode;
    private javax.swing.JMenu RegularDisplay;
    public static javax.swing.JButton addnoteBTN;
    private javax.swing.JLabel addressLBL;
    public static javax.swing.JTextField addressTF;
    private javax.swing.JLabel ageLBL;
    public static javax.swing.JTextField ageTF;
    private javax.swing.JPanel appointmentTAB;
    private javax.swing.JLabel appointmentbackgroundLBL;
    public static javax.swing.JButton appointmentbookBTN;
    public static javax.swing.JButton appointmentdeleteBTN;
    public static javax.swing.JButton appointmentdisplayBTN;
    private javax.swing.JLabel appointmentidLBL;
    private javax.swing.JLabel appointmentidLBL1;
    public static javax.swing.JTextField appointmentidTF;
    public static javax.swing.JTextField appointmentidTF1;
    public static javax.swing.JButton appointmentupdateBTN1;
    private javax.swing.JMenu arrayListUserTemporaryStoredData;
    private com.toedter.calendar.JCalendar calendar;
    private javax.swing.JMenu cannotloginBTNTAB;
    private javax.swing.JLabel chosendateLBL;
    public static javax.swing.JTextField chosendateTF;
    private javax.swing.JButton clearBTN;
    private javax.swing.JButton clearBTN1;
    private javax.swing.JButton clearnotesBTN;
    private javax.swing.JToggleButton confirmdateTOGGLEBTN;
    private javax.swing.JMenu date;
    public static javax.swing.JButton deleteBTN;
    public static javax.swing.JButton deletenoteBTN;
    public static javax.swing.JButton displayBTN;
    public static javax.swing.JButton displaynoteBTN;
    private javax.swing.JLabel doctornameLBL;
    public static javax.swing.JTextField doctornameTF;
    private javax.swing.JLabel doctornumberLBL;
    public static javax.swing.JTextField doctornumberTF;
    private javax.swing.JLabel ehrAnimationLBL;
    private javax.swing.JLabel ehrAnimationLBL1;
    private javax.swing.JButton ehrClearBTN;
    private javax.swing.JButton exitBTN;
    public static javax.swing.JButton exitBTN1;
    private javax.swing.JButton exitBTN2;
    private javax.swing.JButton exitfBTN;
    private javax.swing.JLabel fnameLBL;
    public static javax.swing.JTextField fnameTF;
    private javax.swing.JRadioButton hideC;
    public static javax.swing.JTextField idTF;
    public static javax.swing.JButton jButton2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    public static javax.swing.JButton joshuaBTN;
    private javax.swing.JLabel lnameLBL;
    public static javax.swing.JTextField lnameTF;
    public static javax.swing.JButton loginBTN1;
    private javax.swing.JPanel loginTAB;
    private javax.swing.JPanel loginTAB1;
    private javax.swing.JPanel loginTAB2;
    private javax.swing.JLabel loginbackgroundLBL;
    private javax.swing.JLabel loginbackgroundLBL1;
    private javax.swing.JLabel loginidLBL;
    private javax.swing.JLabel logoLBL;
    private javax.swing.JLabel logoLBL1;
    private javax.swing.JLabel logoLBL2;
    private javax.swing.JLabel logoLBL3;
    private javax.swing.JLabel logoLBL4;
    public static javax.swing.JTextField noteidTF;
    private javax.swing.JLabel notereferenceLBL;
    public static javax.swing.JTextArea notesTA;
    public static javax.swing.JTextArea notesfromfileTA;
    private javax.swing.JLabel passwordLBL;
    public static javax.swing.JPasswordField passwordTF;
    private javax.swing.JButton readfromfileBTN;
    private javax.swing.JLabel regulardisplayLoginDG;
    private javax.swing.JLabel regulardisplayLoginDG1;
    private javax.swing.JLabel regulardisplayLoginDG2;
    private javax.swing.JLabel regulardisplayLoginDG3;
    private javax.swing.JLabel regulardisplayLoginDG4;
    private javax.swing.JButton safetofileBTN;
    public static javax.swing.JButton searchnoteBTN;
    private javax.swing.JRadioButton showC;
    public static javax.swing.JButton signupBTN;
    private javax.swing.JMenu time;
    public static javax.swing.JButton updateBTN;
    private javax.swing.JLabel warningLBL;
    public static javax.swing.JButton yonasBTN;
    // End of variables declaration                   
}
